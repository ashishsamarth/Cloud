--------------------------------------------------------------------------------------------------------------------------------------------------------------------
IAM: Identity & Access Management
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
1.  IAM is a global service in AWS. This can be verified by going to IAM Dashboard and when you try to select a region, you will see the following text
    'IAM does not require a region selection'
    It also indicates that all the users that are created in a particular AWS account are available in all regions.

    a.  The root user is the most powerful user (it can do anything and everything in an AWS account), hence its recommended to create new users to 
        perform specific tasks and limit their capabilites using policies and groups. Since we must follow the principle of least privilege.


    Q01: When creating a USER, how many types of 'Access Types' can be provisioned?
    A01: Their are two types of 'Access Types' that can be utilized

        a.  Programmatic Access: This allows the user to use AWS API, CLI, SDK and Other development tools to be utilized via an access Key ID & secret access key
        b.  AWS Management Console Access: This allows the user to use the (GUI) management console access.
    
    Q02. When creating a USER, is it necessary to Create a Group?
    A02: No, Its not necesary to create a Group while creating a USER. However, as a best practice its recommended to have even a single user to be mapped to group.
        Since over a period of time, the number of users may grow and it will be easier to manage permissions using groups and policies.
    
    Q03: What are tags in AWS?
    A03: Tags are way to organize and categorize resources in AWS.
        Foe e.g.: Their are mulitple EC2 instances in your account, and you want to identify them based on Team names and/or Project Names to quickly identify which 
        EC2 instance is being used for what. Tagging also helps to identify the cost accumulated by the resources which is important for Billing & Thresholds.
    
    Q04: Once the user is created, how many ways can the user get login credentials?
    A04: Their are two ways a user can get hold of login credentials
        a.  via the 'Download.csv'
        b.  'Send Email' : Which has the Email Login Instructions.

    Q05: How can you customize the url for specific user login, Once the user is created?
    A05: Login to the AWS console --> Go to IAM Dashboard --> on the top right under 'AWS Account' --> Look for 'Account Alias'
        a.  If you dont have an alias - It will enable the link to 'Create' an alias
        b.  If you have an alias - It will allow to 'Edit' or 'Delete' an alias

        Important Note: Since IAM is a Global Service, the alia that you create must be unique for entire IAM service across all regions.
        You cannot create an alias if it already exists.

        e.g.:   https://samarth-aws.signin.aws.amazon.com/console
    
    Q06: What is the advantage of having an alias based url for login?
    A06: Following are the advantages
        a.  When you use an 'Alias' based url:
            1.  Your 'Account ID or Alias' is already populated for you
            2.  You can directly login as an IAM user, rather than selecting the radio button between 'root user' vs 'iam user'
    
    Q07: How can you identify if a user is an IAM User vs a ROOT user, just by looking at the management console?
    A07: Once logged in, if you look at the top right of the screen where it shows the user
        a.  An IAM user will have the '@' keyword in the name:
            e.g.    samarth-developer@samarth-aws OR samarth-developer@account-id
        b.  A root user will not have the '@' keyword in the name
    
    Q08: Explain IAM Password Policy?
    A08: In AWS: You can set up a password policy to have
            a.  set a minimum password length
            b.  Require specific character types
                1.  including uppercase letters
                2.  including lowercase letters
                3.  including numbers
                4.  including non-alphanumeric characters
            c.  Allow all IAM users to change their own passwords
            d.  Require users to change their passwords after some time (password expiration)
            e.  Prevent password re-use
    
    Q09: What is the advantage of using an MFA?
    A09: AWS recommends to protect the root and iam users by using MFA (multi-factor-authentication)
        The main benefit of using an MFA is - Even if a password is stolen or hacked, the account will not be compromised.
        Following are the supported devices for MFA in AWS:
        a.  Virtual MFA devices {e.g. Google Authenticator (works on 1 device at a time) or Authy(works on multiple devices at the same time)}
        b.  Universal 2nd Factor (U2F) security key (e.g.- Yubikey)
        c.  Hardware Key fob MFA Device
            a.  For non-government cloud: Its a key fob provided by Gemalto (Thales)
            b.  For government cloud: Its a key fob provided by surepassid
    
    Q10: How to set up a password policy?
    A10: Following are the steps
        a.  Login to the AWS management console (as a user having administrator access)
        b.  Navigate to IAM Dashboard
        c.  Under Access Management, look for 'Account Settings'
        d.  Click on 'Account Settings' and then click on 'Change Password Policy'
        e.  The next screen will have 'Set Password Policy' as a header with the following options
            1.  Enforce Mininum password length (It has a box to enter the number of characters)
            2.  Require at least one uppercase letter from Latin Alphabet (A-Z)
            3.  Require at least one lowercase letter from Latin Alphabet (a-z)
            4.  Require at least one number
            5.  Require at least on non-alphanumeri character (! @ # $ % ^ & * ( ) _ + - = [] {} | ')
            6.  Enable password expiration
            7.  Password expiration requires administrator reset
            8.  Allow users to change their own password
            9.  Prevent Password reuse
        f.  All the above options are checkboxes, so you can select based on your organization's guidelines
        g.  Click on 'Save Changes'


    Q11: How to add MFA to the root user?
    A11: Once logged in as the root user
        a.  Click on the username on the top right
        b.  Under the options, click on 'My Security Credentials'
        c.  You will be navigated to a different page with the following options
            1.  Password
            2.  Multi-Factor authentication (MFA)
            3.  Access keys (access key ID and secret access key)
            4.  CloudFront key paris
            5.  X.509 certificate
            6.  Account Identifiers
        d.  Select 'Multi-Factor authentication', that will provide you with following three options (radio buttons)
            1.  Virtual MFA Device
            2.  U2F security Key
            3.  Other Hardware MFA Device
        e.  Select 'Virtual MFA Device'
            The following virtual devices are supported
            Authy, Duo Mobile, LastPass Authenticator, Microsoft Authenticator, Google Authenticator

    Q12: What are the minimum roles an IAM user must have to be able to generate their individual access keys?
    A12: Following are the mininum roles
        a.  IAM FullAccess  :   To be able to see the roles and perform actions on individual scope
        b.  IAM UserSSHKeys :   To be able to generate their own individual access keys

        Once the iam user has these roles, then 'Security Crendentials' tabe under 'Users' will show up without any errors
        and the 'Create aceess key' option will be enabled.
    
    Q13: How to create an access key for an IAM user to be used with CLI or SDK?
    A13: Once you have the required roles (IAM FullAccess and IAM UserSSHKeys),
        a.  Click on the Top right of the aws management console on your username
        b.  Click on 'Security Credentials', it will take you to 'My Security Credentials' page
        c.  Scroll towards the bottom and look for 'Access Keys'
        d.  click on 'Create Access Keys', it will display the following options (radio buttons)
            1.  Command Line Interface (CLI):   {You plan to use this access key to enable the AWS CLI to access your account}
            2.  Local code: {You plan to use this access key to enable application code in a local development environment to access your AWS account}
            3.  Application running on an AWS compute service:  {You plan to use this access key to enable application code running on an AWS compute service like 
                Amazon EC2, Amazon ECS, Amazon Lambda to access your account}
            4.  Third Party service:    {You plan to use this access key to enable access for a third party application or service that monitors or manager your AWS}
            5.  Application running outside AWS:    {You plan to use this access key to enable an application running on an on-premise host, or to use a local AWS 
                client or third party aws plugin}
            6.  Other:  {Youyuse case is not listed here.}    
        e.  With selection of any option, AWS will provide a potential recommendation.
        f.  Their is an optional step to create a tag to understand what this key will be used for.
        g.  On the 'Retrieve access keys' page: You will see an option to download the access keys via a 'csv' file and also, save it from the GUI
        h.  Click on 'Done' and you will be navigated back to the 'User page'
        i.  Under the 'Access Keys' section, you will see the key with the tag and statu as 'Active'
        j.  If you wish to generate a new access keys, you can do that, but only one access key can be active at one time.
        k,  Their is an option to delete the keys, if you feel the need to do so.
    
    Q14: What are the minimum policies to have on the role or the user to be able to access AWS Cloud Shell?
    A14: Their is only one permission which must be assigned to the role or the user to have them able to access AWS Cloud Shell
         The policy name is - AWS CloudShellFullAccess
         Once the policy is attached to the user or the role, the cloud shell will work for the user.

    Q15: What are IAM roles for services?
    A15: So far, we have dealt with a username accessed by a physical person to be able to perform certain checks or tasks. The next category is to have applications 
    talk to each other (similar to one microservice talking to another). For this to happen, the service which is trying to perform an action on another service 
    must have the permission to do. This is managed by IAM roles for the service. 
    Following are few examples:
        a.  EC2 Instance roles
        b.  Lambda Function roles
        c.  Roles for CloudFormation
    
    Q16: How to create an IAM role for a service?
    A16: Login to the AWS management console with a User who has administrative access.
        a.  Navigate to the IAM dashboard by simply searching IAM on the search bar
        b.  From IAM dashboard, navigate to 'Roles' under 'Access Management'
        c.  If this is the first time you are trying to create a role, you will see following roles pre-existing
            1.  AWS ServiceRoleForSupport
            2.  AWS ServiceRoleForTrustedAdvisor
        d.  Click on 'Create Role'
        e.  Next Page will have a header 'Select Trusted Entity' with the following options (radio buttons)
            1.  AWS Service:    {Allows AWS Services like EC2, Lambda or others to perform actions in this account}
            2.  AWS Account:    {Allows entities in other AWS accounts belonging to you or a 3rd party to perform actions in this account}
            3.  Web Identity:   {Allows users federated by the external web identity provider to assumer this role to perform actions in this account}
            4.  SAML 2.0 Federation:    {Allows users federated with SAML 2.0 from a corporate directory to perform actions in this account}
            5.  Custom Trust Policy:    {Create a custom trust policy to enable others to perform actions in this account}
        f.  For ease of understanding, lets create an 'AWS Service' role for an EC2 instance to read data in IAM
        g.  On the 'Add Permissions' page for this new role, search and select 'IAMReadOnlyAccess'
        h.  On the next page, provide a role name and click next
        i.  Once the role is created, it will show up on the 'Roles' page

    Q17: What are IAM security tools?
    A17: Their are two security tools
        a.  IAM Credentials Report
            This is at the account-level
            Its a report that lists all your account uders and the status of their various credentials
        
        b.  IAM Access Advisor
            This is at the user-level
            Access Advisor shows the service permissions granted to a user and when those services where last accessed
            This information can be utilized to revise the policies and implement 'principle of least privilege'

    Q18: How to generate a IAM Credentials Report?
    A18: Login to the AWS management console with a User who has administrative access.
        a.  Navigate to the IAM dashboard by simply searching IAM on the search bar
        b.  On the IAM dashboard (Left vertical bar), look for 'Credentials Report' under 'Access Report'
        c.  Click on 'Crendentials Report' and then 'Download credentials report'
        d.  The crendentials report has the following columns (per user on the account includinr <root>)
            1.  user
            2.  arn
            3.  user_creation_time
            4.  password_enabled
            5.  password_last_used
            6.  password_last_changed
            7.  password_next_rotation
            8.  mfa_active
            9.  access_key_1_active
            10. access_key_1_last_rotated
            11. access_key_1_last_used_date
            12. access_key_1_last_used_region
            13. access_key_1_last_used_service
            14. access_key_2_active
            15. access_key_2_last_rotated
            16. access_key_2_last_used_date
            17. access_key_2_last_used_region
            18. access_key_2_last_used_service
            19. cert_1_active
            20. cert_1_last_rotated
            21. cert_2_active
            22. cert_2_last_rotated

    Q19: How to navigate to Access-Advisor?
    A18:  Login to the AWS management console with an IAM user
        a.  Navigate to the IAM dashboard by simply searching IAM on the search bar
        b.  On the IAM dashboard (Left vertical bar), look for 'Users'
        c.  Click on users and then click on 'Access Advisor' on the page.
        d.  Access-Advisor tells you  - 'Which particular service was accessed when based on what policy'
        e.g.
            Service         Policies Granting Permissions       Last Accessed
            AmazonEC2       AmazonEC2FillAccess and 1 More      Today
            AWS Cloudshell  AWSCloudShellFullAccess             Today


    IAM Guidelines & Best Practices
    a.  Dont Use the root account except for AWS account setup
    b.  One physical user = one AWS user
    c.  Assign users to groups and assign permissions to group
    d.  Create a strong password policy
    e.  Use and enforce the use of MFA
    f.  Create and use Roles for giving permissions for AWS services
    g.  Use Access Keys for Programmatic Access (CLI / SDK)
    h.  Audit permission of your account with the IAM credentials report
    i.  Never share IAM users and Access keys.


    IAM Summary:
    a.  USERS:      Mapped to a physical user, has a password for AWS console
    b.  GROUPS:     Contains Users only
    c.  POLICIES:   JSON document that outlines permissions for users or groups
    d.  ROLES:      For EC2 instances or AWS services
    e.  SECURITY:   MFA + Password Policy
    f.  ACCESS KEYS: Access AWS using the CLI or SDK
    g.  Audit:      IAM Credentials and IAM Access Advisor

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
AWS - CLI & Cloud Shell
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
    
    
    Q01: In how many ways, can the users access AWS?
    A01: Their are 3 ways by which users can access AWS
        a.  AWS Management Console (protected by password + MFA)
        b.  AWS Command Line Interface (CLI): protected by access keys
        c.  AWS Software Development Kit (SDK): for code: protected by access keys
    
    Note: 
    Access keys are generated using the AWS console
    Users manage their own access keys (access keys id ~= username; secret access key ~= password), so every IAM user can have their own keys

    Q02: How to configure AWS CLI on windows?
    A02: Following are the steps:
        a.  Download the AWSCLI version for windows and install on your machine.
        b.  To verify, if it was installed correctly, you can type 'aws --version' on the windows command prompt and the output should look like the following

            C:\Users\samarth>aws --version
            aws-cli/2.9.19 Python/3.9.11 Windows/10 exe/AMD64 prompt/off
        c.  Now, its time to configure aws cli on the windows machine, you will neeed the following
            a.  Your access key
            b.  Your secret key
            c.  Region (select the one closest (for training purposes))
        d.  Execute 'aws configure' on the windows command prompt

            C:\Users\samarth>aws configure
                AWS Access Key ID [None]: MyAccessKey
                AWS Secret Access Key [None]: MySecretKey
                Default region name [None]: us-east-1
                Default output format [None]:
            C:\Users\samarth>
        6.  Now the AWS CLI is configured, we run the following command to see, if it returns an output.

            C:\Users\samarth>aws iam list-users

            {
                "Users": [
                    {
                        "Path": "/",
                        "UserName": "Samarth-Admin",
                        "UserId": "AIDA*************",
                        "Arn": "arn:aws:iam::*************:user/Samarth-Admin",
                        "CreateDate": "2023-01-29T15:31:41+00:00",
                        "PasswordLastUsed": "2023-01-29T16:36:37+00:00"
                    },
                    {
                        "Path": "/",
                        "UserName": "Samarth-Developer",
                        "UserId": "AIDA*************",",
                        "Arn": "arn:aws:iam::*************:user/Samarth-Developer",
                        "CreateDate": "2023-01-29T13:59:14+00:00",
                        "PasswordLastUsed": "2023-01-29T16:35:12+00:00"
                    }
                ]
            }
            C:\Users\samarth>
        
    Important Note: AWS-CLI is just another method of accessing the data, the data shows will always be same across management console and CLI
    For e.g.:- If we go ahead and remove the policy 'IAM FullAccess' from the group 'AWS-Developer', which IAM user 'Samarth-Developer' is a part of,
    And then execute the same command (aws iam list-users) from windows command prompt, their will be no output, same can be validated by going to the 
    Management console, under users page, you will see 'You need Permissions' message.

    Q03: What is AWS CloudShell?
    A03: AWS CloudShell is a browser-based shell that makes it easier to securely manage, explore, and interact with your AWS resources. 
    CloudShell is pre-authenticated with your console credentials.

    {So if you are logged in as 'samarth-developer', the same credentials will be used by default}
    For an IAM user to be able to use the AWS CloudShell, the user must have the 'AWS CloudShellFullAccess' permission policy attached to the user 
    id either by a group policy or a user policy.

    Note: The username for cloudshell is:- cloudshell-user

            [cloudshell-user@ip-10-0-124-229]$aws iam list-users

            {
                "Users": [
                    {
                        "Path": "/",
                        "UserName": "Samarth-Admin",
                        "UserId": "AIDA*************",
                        "Arn": "arn:aws:iam::*************:user/Samarth-Admin",
                        "CreateDate": "2023-01-29T15:31:41+00:00",
                        "PasswordLastUsed": "2023-01-29T16:36:37+00:00"
                    },
                    {
                        "Path": "/",
                        "UserName": "Samarth-Developer",
                        "UserId": "AIDA*************",",
                        "Arn": "arn:aws:iam::*************:user/Samarth-Developer",
                        "CreateDate": "2023-01-29T13:59:14+00:00",
                        "PasswordLastUsed": "2023-01-29T16:35:12+00:00"
                    }
                ]
            }
            [cloudshell-user@ip-10-0-124-229]$

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Budget and Billing
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

    Q01: Can an IAM user access the Billing and Cost Management Dashboard by default?
    A01: No, the only user who can access Billing and Cost Management Dashboard by default is the root user.
    The root user need to provide permisions to IAM user - so that they can also access Billing and Cost information

    Following are the steps for the root user to allow access.
    Note:   This approach only works for an IAM user with Administrator Access
    a.  Login as the root user
    b.  On the top right click on Login name and then click on 'Account'
    c.  Once navigated to the new page, look for 'IAM User and Role Access to Billing Information'
    d.  Click on 'Edit' and then 'Activate IAM Access'
    e.  Refresh the page and now log in as the IAM user with Administrator Access
    f.  Click on the top right on login name and then click on 'Billing Dashboard'
    h.  Since the IAM access has been activated, this IAM user will now be able to see the AWS Billing Dashboard

    To provide 'AWS Billing Dashboard' Access to a non-administrative IAM user, the steps are different
    a.  Login as the root user
    b.  Navigate to the IAM dashboard by simply searching IAM on the search bar
    c.  Under 'Access Management' click on 'User Groups'
    d.  Click the group, to which the non-administrative IAM user belongs to
    e.  Click on 'Permissions'
    f.  Search for 'Billing' permission policy and attach this policy to this group.
    8.  Now th 'Non-administrative' IAM User should also have access to the AWS Billing dashboard.


    Q02: How to create a Budget?
    A02: Login to the management console as an Administrative / root user
        a.  On the top right click on Login name and then click on 'Billing Dashboard'
        b.  On the left vertical menu (side bar), click on 'Budgets' under 'Cost Management'
        c.  On the 'Budgets' page, click on 'Create a Budget'
        d.  Their are two budget set up types, 'Use a template (simplified)' and 'Customize (advanced)'
        e.  Select 'Use a Template (simplified)'
        f.  Their are multiple templates, namely (Radio Buttons)
            1.  'Zero spend budget':    {Create a budget that notified you once your spending exceeds $0.01 which is above the AWS free tier limits}
            2.  'Monthly Cost Budget':  {Create a monthly budget that notified you if you exceed, or are forecasted to exceed, the budget amount}
            3.  'Daily Savings Plans Coverage budget':  {Create a converage budget for your savings plans that notifies you when you fall below the defined target}
            4.  'Daily reservation utilization budget': {Ceate a utilization budget for your reservations that notifies you when you fall below the defined target}
        g.  Click on 'Monthly Cost Budget'
        h.  Provide the following values
            1.  Budget Name
            2.  Enter your budgeted amount ($)
            3.  Email Recipients:   {To receive threshold alerts}
        i.  Once the budget is created, 

